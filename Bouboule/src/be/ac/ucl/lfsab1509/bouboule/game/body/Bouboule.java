/*
 * This file is part of Bouboule.
 * 
 * Copyright 2013 UCLouvain
 * 
 * Authors:
 *  * Group 7 - Course: http://www.uclouvain.be/en-cours-2013-lfsab1509.html
 *    Matthieu Baerts <matthieu.baerts@student.uclouvain.be>
 *    Baptiste Remy <baptiste.remy@student.uclouvain.be>
 *    Nicolas Van Wallendael <nicolas.vanwallendael@student.uclouvain.be>
 *    Helene Verhaeghe <helene.verhaeghe@student.uclouvain.be>
 * 
 * Bouboule is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

package be.ac.ucl.lfsab1509.bouboule.game.body;

import be.ac.ucl.lfsab1509.bouboule.game.gameManager.GraphicManager;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.Sprite;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.math.MathUtils;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.physics.box2d.BodyDef.BodyType;

/*
 * Bouboule class generated by a jsonFile
 */
public class Bouboule extends GameBody{

	//Texture texture;
	TextureRegion 	texture;
	Sprite 			sprite;
	
	//level 0 => gyroscope
	//level 1 => go mid
	//level 2 => troll
	//level 3 => arret mid
	//level 4 => aggresif
	//level 5 => defencif
	//level 6 => attenticipe
	int 			IALevel;

	/*
	 * Constructor for a Bouboule object 
	 * - radius 	: radius of Bouboule for a shape like body
	 * - Bodytype 	: Dynamic or Static 
	 * - density 	: Mass in [kg] of Bouboule 
	 * - elasticity : define the elastical property of Bouboul [0..1]f
	 * - px/py		: initial posistion
	 * - angle		: initil rotation
	 * - texRegionPath : Path to the image file
	 * - jsonFile	: Path to the jsonFile if needed ( "" else)
	 * - jsonName	: jsonName of the object ( must match the json file attribute )
	 *
	 * public Bouboule(float radius, BodyType bodyType,float density,
	 * 	float elasticity,float px,float py, float angle,String texRegionPath,
	 *  String jsonFile, String jsonName)
	 */
	public Bouboule(float radius, BodyType bodyType,float density,
			float elasticity,float px,float py, float angle,String texRegionPath, 
			String jsonFile, String jsonName, short entity, int IALevel) {

		super();
		
		this.IALevel = IALevel;
		
		Vector2 pos	= new Vector2(px,py);

		//
		this.texture = new TextureRegion(new Texture(texRegionPath));

		this.sprite = new Sprite(texture);

		MakeBody(0, 0, radius, bodyType, density, elasticity, false, pos, angle, jsonFile, jsonName,
				GraphicManager.convertToGame(texture.getRegionWidth()));

		//Ensure that the object don't rotate.
		body.setFixedRotation(true);
		body.setUserData(entity);
	}


	/*
	 * (non-Javadoc)
	 * @see be.ac.ucl.lfsab1509.bouboule.game.body.GameBody#draw(com.badlogic.gdx.graphics.g2d.SpriteBatch)
	 */
	public void draw(SpriteBatch sp) {

		if(isAlive){

			if ( origin != null){
				
				//Ensure that the body image position is set on the origin defined by 
				//the jsonFile
				
				Vector2 pos = positionVector.sub(origin);
				sprite.setPosition(pos.x, pos.y);
				sprite.setOrigin(origin.x, origin.y);
				sprite.setRotation(body.getAngle() * MathUtils.radiansToDegrees);

				sprite.draw(sp);
			} else {
				sp.draw(texture, positionVector.x, positionVector.y);
			}
		}
	}

	/*
	 * (non-Javadoc)
	 * @see be.ac.ucl.lfsab1509.bouboule.game.body.GameBody#update(float)
	 */
	public void update(){
		
		Vector2 Acceleration;
		Gdx.app.log ("Ajout IA", "hello");
		if(IALevel == 0){
			Gdx.app.log ("Ajout IA", "0");
			float accelX = Gdx.input.getAccelerometerX();
			float accelY = Gdx.input.getAccelerometerY();
			accelX=0f;
			accelY=0f;
			Acceleration = new Vector2(accelX,accelY);
		}else{
			Gdx.app.log ("Ajout IA", "1");
			Acceleration =  IA.compute(IALevel,this);
			//faire l'appelle sur la classe IA
			
		}
		
		body.applyForceToCenter(Acceleration);
		
		if(isAlive){
			super.update();
		}

	}

	/*
	 * Get body rotation in degrees
	 * if needed =)
	 * 
	 * GetBodyRotationInDegrees()
	 */
	public float GetBodyRotationInDegrees(){
		return body.getAngle()*MathUtils.radiansToDegrees;
	}

}
